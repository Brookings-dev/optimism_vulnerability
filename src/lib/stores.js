// import { browser } from '$app/env';
import { writable, readable, derived } from 'svelte/store';
import { rollups } from 'd3';
import data from '$lib/data/misinformation_data_rev_apr28.csv';
import stateAbbrs from '$lib/data/helpers/stateAbbrsFull.js';
import countyAbbrs from '$lib/data/helpers/countyAbbrs.js';

///defaults
export const selectedFirst = writable('optimism')
export const selectedSecond = writable('vax');
export const selectedState = writable('WV')
export const selectedCounty = writable('54035')

export const isTouchDevice = readable(false, (set) => {
	return set(
		browser
			? 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0
			: false
	);
});

export const parsedStates = Object.fromEntries(
	rollups(
		data,
		(state) => {
			const StateAbbr = state[0];
			return {
				optimism: StateAbbr['optimism'],
				unemployment: StateAbbr['unemployment'],
				income: StateAbbr['income'],
				poverty: StateAbbr['poverty'],
				college: StateAbbr['college'],
				vax: StateAbbr['vax'],
				skills: StateAbbr['skills'],
				newspapers: StateAbbr['newspapers']
			};
		},
		(d) => stateAbbrs[d.area_name]

	)
);


export const parsedCounties = Object.fromEntries(
	rollups(
		data,
		(county) => {
			const CountyAbbr = county[0];
			return {
				optimism: CountyAbbr['optimism'],
				unemployment: CountyAbbr['unemployment'],
				income: CountyAbbr['income'],
				poverty: CountyAbbr['poverty'],
				college: CountyAbbr['college'],
				vax: CountyAbbr['vax'],
				skills: CountyAbbr['skills'],
				newspapers: CountyAbbr['newspapers'],
				county: CountyAbbr['area_name'].split(',')[0],
				state: CountyAbbr['area_name'].split(', ')[1],
				county_state: CountyAbbr['area_name']
			};
		},
		(d) => countyAbbrs[d.area_name],
	)
)


export const parsedUSA = data.map((metric) => {
	return {
		optimism: metric['optimism'],
		unemployment: metric['unemployment'],
		income: metric['income'],
		poverty: metric['poverty'],
		college: metric['college'],
		vax: metric['vax'],
		skills: metric['skills'],
		newspapers: metric['newspapers'],
		name: metric['area_name']
	}
}).find((name) => name.name == 'United States')


// a lazy load store that, once the window is available, kicks up an IntersectionObserver instance and watches inputted images, video and iframes. Use in coordination with Image.svelte.
export const lazyloader = writable(null, (set) => {
	// lazyload callback function that handles images iframes and videos, uses common data-src pattern
	const lazyLoadCb = (entries, observer) => {
		entries.forEach((entry) => {
			if (entry.target.tagName === 'IMG') {
				if (entry.isIntersecting && entry.target.src !== entry.target.dataset.src) {
					// TODO: add srcset option here
					entry.target.src = entry.target.dataset.src;
					observer.unobserve(entry.target);
				}
			} else if (entry.target.tagName === 'VIDEO') {
				if (entry.isIntersecting && entry.target.poster !== entry.target.dataset.poster) {
					const children = [...entry.target.children];
					entry.target.poster = entry.target.dataset.poster;
					children.forEach((child) => {
						child.src = child.dataset.src;
					});
					entry.target.load();
					observer.unobserve(entry.target);
				}
			} else if (entry.target.tagName === 'IFRAME') {
				if (entry.isIntersecting && entry.target.src !== entry.target.dataset.src) {
					entry.target.src = entry.target.dataset.src;
					observer.unobserve(entry.target);
				}
			}
		});
	};

	// set IntersectionObserver once window is available
	if (typeof window !== 'undefined')
		set(new IntersectionObserver(lazyLoadCb, { rootMargin: '0px 0px 0px 0px' }));

	return () => set(null);
});
